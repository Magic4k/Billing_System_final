/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Products;

import billing_system_project.login;
import db_connection.db_connection;
import java.sql.Statement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import manager.manager_frame;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author abdoa
 */
public class stockmanager_products_frame extends javax.swing.JFrame {

   //fetch the databse into the table
    public void fetch_products(){

        try{ 
     
     db_connection c= new db_connection();
     Connection conn=c.connect();
       String query = "SELECT * FROM  products";
        PreparedStatement stmt = conn.prepareStatement(query);
         ResultSet rs = stmt.executeQuery();
         products_Table.setModel(DbUtils.resultSetToTableModel(rs));
         conn.close();
         stmt.close();
            }
            
            catch (SQLException ee){
            
            ee.getMessage();
        }
    }
    //check if the brand isn't in the database it insert it and add it to the combobox
    public void check_brand(String brand){
        try{ 
     
     db_connection c= new db_connection();
            Connection conn=c.connect();
           String query = "SELECT * FROM  brands where brand_name = ? ";
           PreparedStatement stmt = conn.prepareStatement(query);
           stmt.setString(1, brand);
         ResultSet rs = stmt.executeQuery();
         if(!rs.next()){
              query = "insert into brands values  (?) ";
             stmt = conn.prepareStatement(query);
             stmt.setString(1, brand);
             stmt.execute();
             brand_ComboBox.addItem(brand);
             System.out.println("New brand added");
             message_Label.setText("New brand added");
             
         }
         conn.close();
         stmt.close();
            }
            
            catch (SQLException ee){
            
            ee.getMessage();
        }
    } 
    //check if the category isn't in the database it insert it and add it to the combobox
    public void check_category(String category){
          try{ 
     
     db_connection c= new db_connection();
            Connection conn=c.connect();
           String query = "SELECT * FROM  categories where category_name = ? ";
           PreparedStatement stmt = conn.prepareStatement(query);
           stmt.setString(1, category);
         ResultSet rs = stmt.executeQuery();
         if(!rs.next()){
              query = "insert into categories values  (?) ";
             stmt = conn.prepareStatement(query);
             stmt.setString(1, category);
             stmt.execute();
             category_ComboBox.addItem(category);
             System.out.println("new category category");
              if("New brand added".equals(message_Label.getText())){
                 message_Label.setText("New brand and category added");
             }
             else
              message_Label.setText("New category added");
             
         }
         conn.close();
         stmt.close();
            }
            
            catch (SQLException ee){
            
            ee.getMessage();
        }
        
    }
    
    public stockmanager_products_frame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        products_Table = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        search_TextField = new javax.swing.JTextField();
        find_Button = new javax.swing.JButton();
        category_ComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        cat_filter_Button = new javax.swing.JButton();
        brand_ComboBox = new javax.swing.JComboBox<>();
        brand_filter_Button = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        price_TextField = new javax.swing.JTextField();
        discount_TextField = new javax.swing.JTextField();
        quantity_TextField = new javax.swing.JTextField();
        brand_TextField = new javax.swing.JTextField();
        category_TextField = new javax.swing.JTextField();
        add_Button = new javax.swing.JButton();
        edit_Button = new javax.swing.JButton();
        delete_Button = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        message_Label = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        products_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Product_id", "Name", "Price", "Discount", "Quantity", "Brand_name", "Category"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        products_Table.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                products_TableAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        products_Table.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                products_TableFocusGained(evt);
            }
        });
        products_Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                products_TableMouseClicked(evt);
            }
        });
        products_Table.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                products_TablePropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(products_Table);
        if (products_Table.getColumnModel().getColumnCount() > 0) {
            products_Table.getColumnModel().getColumn(0).setResizable(false);
            products_Table.getColumnModel().getColumn(1).setResizable(false);
            products_Table.getColumnModel().getColumn(2).setResizable(false);
            products_Table.getColumnModel().getColumn(3).setResizable(false);
            products_Table.getColumnModel().getColumn(4).setResizable(false);
            products_Table.getColumnModel().getColumn(5).setResizable(false);
            products_Table.getColumnModel().getColumn(6).setResizable(false);
        }

        jButton1.setText("Logout");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Search");

        search_TextField.setToolTipText("product name");
        search_TextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_TextFieldActionPerformed(evt);
            }
        });

        find_Button.setText("Find");
        find_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                find_ButtonActionPerformed(evt);
            }
        });

        category_ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--" }));
        category_ComboBox.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                category_ComboBoxComponentAdded(evt);
            }
        });
        category_ComboBox.addHierarchyListener(new java.awt.event.HierarchyListener() {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                category_ComboBoxHierarchyChanged(evt);
            }
        });
        category_ComboBox.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                category_ComboBoxAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        category_ComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                category_ComboBoxFocusGained(evt);
            }
        });
        category_ComboBox.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
                category_ComboBoxPopupMenuCanceled(evt);
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                category_ComboBoxPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                category_ComboBoxPopupMenuWillBecomeVisible(evt);
            }
        });
        category_ComboBox.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                category_ComboBoxComponentShown(evt);
            }
        });
        category_ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                category_ComboBoxActionPerformed(evt);
            }
        });
        category_ComboBox.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                category_ComboBoxPropertyChange(evt);
            }
        });
        category_ComboBox.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                category_ComboBoxVetoableChange(evt);
            }
        });

        jLabel2.setText("Category");

        cat_filter_Button.setText("Filter");
        cat_filter_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cat_filter_ButtonActionPerformed(evt);
            }
        });

        brand_ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--" }));
        brand_ComboBox.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                brand_ComboBoxAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        brand_ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brand_ComboBoxActionPerformed(evt);
            }
        });

        brand_filter_Button.setText("Filter");
        brand_filter_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brand_filter_ButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Brand");

        price_TextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                price_TextFieldKeyPressed(evt);
            }
        });

        discount_TextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discount_TextFieldActionPerformed(evt);
            }
        });
        discount_TextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                discount_TextFieldKeyPressed(evt);
            }
        });

        quantity_TextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantity_TextFieldActionPerformed(evt);
            }
        });
        quantity_TextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                quantity_TextFieldKeyPressed(evt);
            }
        });

        add_Button.setText("ADD");
        add_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_ButtonActionPerformed(evt);
            }
        });

        edit_Button.setText("EDIT");
        edit_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edit_ButtonActionPerformed(evt);
            }
        });

        delete_Button.setText("DELETE");
        delete_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_ButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Name");

        jLabel5.setText("Price");

        jLabel6.setText("Discount");

        jLabel7.setText("Quantity");

        jLabel8.setText("Brand");

        jLabel9.setText("Category");

        message_Label.setForeground(new java.awt.Color(255, 0, 0));
        message_Label.setText("    ");
        message_Label.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
                message_LabelAncestorRemoved(evt);
            }
        });
        message_Label.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                message_LabelComponentHidden(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 783, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(273, 273, 273)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(145, 145, 145)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(brand_ComboBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(category_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(42, 42, 42)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(find_Button)
                                            .addComponent(brand_filter_Button)
                                            .addComponent(cat_filter_Button)))
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(discount_TextField, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                                                    .addComponent(brand_TextField))
                                                .addGap(52, 52, 52)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(quantity_TextField, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                                                    .addComponent(category_TextField)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(52, 52, 52)
                                                .addComponent(price_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(edit_Button)
                                            .addComponent(add_Button)
                                            .addComponent(delete_Button)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(113, 113, 113)
                                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(126, 126, 126)
                                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(117, 117, 117)
                                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(143, 143, 143)
                                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(search_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(9, 9, 9)
                                        .addComponent(message_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1)))
                        .addGap(18, 18, 18))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(add_Button)
                        .addGap(41, 41, 41)
                        .addComponent(edit_Button)
                        .addGap(33, 33, 33)
                        .addComponent(delete_Button))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(search_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(find_Button))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(price_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(cat_filter_Button)
                                                .addComponent(discount_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(quantity_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(category_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel3))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel8)
                                        .addComponent(jLabel9)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(brand_filter_Button)
                                    .addComponent(brand_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(brand_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(category_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jLabel6))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 76, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(message_Label))
                .addContainerGap())
        );

        search_TextField.getAccessibleContext().setAccessibleName("product name");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        this.setVisible(false);
        login x= new login();
        x.setVisible(true);



    }//GEN-LAST:event_jButton1ActionPerformed

    private void products_TablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_products_TablePropertyChange

  
    }//GEN-LAST:event_products_TablePropertyChange

    private void products_TableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_products_TableFocusGained
 
        
    }//GEN-LAST:event_products_TableFocusGained

    private void find_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_find_ButtonActionPerformed
        

 try{ 
     
     db_connection c= new db_connection();
           String product_name = search_TextField.getText();
            Connection conn=c.connect();
           String query = "SELECT * FROM  products where name like ? ";
           PreparedStatement stmt = conn.prepareStatement(query);
           stmt.setString(1, "%"+product_name+"%");
         ResultSet rs = stmt.executeQuery();
                    products_Table.setModel(DbUtils.resultSetToTableModel(rs));
         conn.close();
         stmt.close();
            }
            
            catch (SQLException ee){
            
            ee.getMessage();
        }

    }//GEN-LAST:event_find_ButtonActionPerformed

    private void category_ComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_category_ComboBoxActionPerformed
      
    }//GEN-LAST:event_category_ComboBoxActionPerformed

    private void category_ComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_category_ComboBoxFocusGained
        {
        }    }//GEN-LAST:event_category_ComboBoxFocusGained

    private void cat_filter_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cat_filter_ButtonActionPerformed
       
        if(category_ComboBox.getSelectedIndex()==0){
       
        fetch_products();
        }
        
        else{
        try{ 
            
        String cat_name= category_ComboBox.getSelectedItem().toString();
        db_connection c= new db_connection(); 
        Connection conn=c.connect();
           String query = "SELECT * FROM  products where category_name = ? ";
           PreparedStatement stmt = conn.prepareStatement(query);
           stmt.setString(1, cat_name);
         ResultSet rs = stmt.executeQuery();
                    products_Table.setModel(DbUtils.resultSetToTableModel(rs));
         conn.close();
         stmt.close();
            }
            
            catch (SQLException ee){
            
            ee.getMessage();
        }
        
                }
    }//GEN-LAST:event_cat_filter_ButtonActionPerformed

    private void category_ComboBoxHierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_category_ComboBoxHierarchyChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_category_ComboBoxHierarchyChanged

    private void category_ComboBoxPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_category_ComboBoxPropertyChange
    }//GEN-LAST:event_category_ComboBoxPropertyChange

    private void category_ComboBoxVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_category_ComboBoxVetoableChange
        // TODO add your handling code here:
    }//GEN-LAST:event_category_ComboBoxVetoableChange

    private void category_ComboBoxPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_category_ComboBoxPopupMenuWillBecomeInvisible
        // TODO add your handling code here:
    }//GEN-LAST:event_category_ComboBoxPopupMenuWillBecomeInvisible

    private void category_ComboBoxPopupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_category_ComboBoxPopupMenuCanceled
        // TODO add your handling code here:
    }//GEN-LAST:event_category_ComboBoxPopupMenuCanceled

    private void category_ComboBoxPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_category_ComboBoxPopupMenuWillBecomeVisible
        // TODO add your handling code here:
    }//GEN-LAST:event_category_ComboBoxPopupMenuWillBecomeVisible

    private void category_ComboBoxComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_category_ComboBoxComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_category_ComboBoxComponentAdded

    private void category_ComboBoxComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_category_ComboBoxComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_category_ComboBoxComponentShown

    private void category_ComboBoxAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_category_ComboBoxAncestorAdded
try{ //add all the categories from the database into the combobox when the frame is opened
     
     db_connection c= new db_connection();
         Connection conn=c.connect();
           String query = "SELECT category_name FROM  categories";
            PreparedStatement stmt =  conn.prepareStatement(query);
         ResultSet rs = stmt.executeQuery();
         while(rs.next()){
             String name =rs.getString("category_name");
             category_ComboBox.addItem(name);
         }
         conn.close();
         stmt.close();
}
        
catch (SQLException ee){
            
            ee.getMessage();}
    }//GEN-LAST:event_category_ComboBoxAncestorAdded

    private void brand_filter_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brand_filter_ButtonActionPerformed
        if(brand_ComboBox.getSelectedIndex()==0){
       
        fetch_products();
        }
        
        else{  
        try{ 
            
        String brand_name= brand_ComboBox.getSelectedItem().toString();
        db_connection c= new db_connection(); 
        Connection conn=c.connect();
           String query = "SELECT * FROM  products where brand_name = ? ";
           PreparedStatement stmt = conn.prepareStatement(query);
           stmt.setString(1, brand_name);
         ResultSet rs = stmt.executeQuery();
                    products_Table.setModel(DbUtils.resultSetToTableModel(rs));
         conn.close();
         stmt.close();
            }
            
            catch (SQLException ee){
            
            ee.getMessage();
        }}
            }//GEN-LAST:event_brand_filter_ButtonActionPerformed

    private void brand_ComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brand_ComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_brand_ComboBoxActionPerformed

    private void brand_ComboBoxAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_brand_ComboBoxAncestorAdded
try{ //add all the brands from the database into the combobox when the frame is opened
     
     db_connection c= new db_connection();
         Connection conn=c.connect();
           String query = "SELECT brand_name FROM  brands";
            PreparedStatement stmt =  conn.prepareStatement(query);
         ResultSet rs = stmt.executeQuery();
         while(rs.next()){
             String name =rs.getString("brand_name");
             brand_ComboBox.addItem(name);
             System.out.println(name);
         }
         conn.close();
         stmt.close();
        }
        
catch (SQLException ee){
            
            ee.getMessage();}
    }//GEN-LAST:event_brand_ComboBoxAncestorAdded

    private void products_TableAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_products_TableAncestorAdded
fetch_products();
    }//GEN-LAST:event_products_TableAncestorAdded

    private void discount_TextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discount_TextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_discount_TextFieldActionPerformed

    private void quantity_TextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantity_TextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantity_TextFieldActionPerformed

    @SuppressWarnings("empty-statement")
    private void add_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_ButtonActionPerformed
        String name=nameTextField.getText();
        String price=price_TextField.getText();
        String discount =discount_TextField.getText();
        String quantity= quantity_TextField.getText();
        String brand=brand_TextField.getText();
        String category=category_TextField.getText();
        
        if(name.isEmpty()||price.isEmpty()||discount.isEmpty()||quantity.isEmpty()|| brand.isEmpty()||category.isEmpty()){
            JOptionPane.showMessageDialog(this, "Enter all the fields");
        }
        else{
        try{
            db_connection c=new db_connection();
            Connection conn= c.connect() ;
            check_brand(brand);
            check_category(category);
            String query ="INSERT INTO products values (?,?,?,?,?,?)";
            PreparedStatement stmt =conn.prepareStatement(query);
            stmt.setString(1,name );
            stmt.setDouble(2, Double.parseDouble(price));
            stmt.setDouble(3,Double.parseDouble( discount));
            stmt.setInt(4, Integer.parseUnsignedInt(quantity));
            stmt.setString(5, brand);
            stmt.setString(6, category);
            stmt.execute();            
            fetch_products();
            JOptionPane.showMessageDialog(this, "Item Added ");
            conn.close();
            stmt.close();
        nameTextField.setText("");
        price_TextField.setText("");
        discount_TextField.setText("");
        quantity_TextField.setText("");
        brand_TextField.setText("");
        category_TextField.setText("");


        }
        
        catch (SQLException ee){
            
            ee.getMessage();
            System.out.println("error");
        }

        }
    }//GEN-LAST:event_add_ButtonActionPerformed

    private void price_TextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_price_TextFieldKeyPressed
        char c= evt.getKeyChar();
        if(Character.isLetter(c)){
            price_TextField.setEditable(false);
            message_Label.setText("Please Enter number only");
        }
        else{
           price_TextField.setEditable(true);
           message_Label.setText("");

        }


    }//GEN-LAST:event_price_TextFieldKeyPressed

    private void discount_TextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_discount_TextFieldKeyPressed
char c= evt.getKeyChar();
        if(Character.isLetter(c)){
            discount_TextField.setEditable(false);
            message_Label.setText("Please Enter number only");
        }
        else{
           discount_TextField.setEditable(true);
           message_Label.setText("");

        }
    }//GEN-LAST:event_discount_TextFieldKeyPressed

    private void quantity_TextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quantity_TextFieldKeyPressed
char c= evt.getKeyChar();
        if(Character.isLetter(c)){
            quantity_TextField.setEditable(false);
            message_Label.setText("Please Enter number only");
        }
        else{
           quantity_TextField.setEditable(true);
           message_Label.setText("");

        }
    }//GEN-LAST:event_quantity_TextFieldKeyPressed

    private void products_TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_products_TableMouseClicked
        int row =products_Table.getSelectedRow();
        String name =    products_Table.getValueAt(row, 1).toString();
        String price =    products_Table.getValueAt(row, 2).toString();
        String discount =   products_Table.getValueAt(row, 3).toString();
        String quantity = products_Table.getValueAt(row, 4).toString();
        String brand =  products_Table.getValueAt(row, 5).toString();
        String category =  products_Table.getValueAt(row, 6).toString();
        
        nameTextField.setText(name);
        price_TextField.setText(price);
        discount_TextField.setText(discount);
        quantity_TextField.setText(quantity);
        brand_TextField.setText(brand);
        category_TextField.setText(category);


    }//GEN-LAST:event_products_TableMouseClicked

    private void delete_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_ButtonActionPerformed

        String name=nameTextField.getText();
        String price=price_TextField.getText();
        String discount =discount_TextField.getText();
        String quantity= quantity_TextField.getText();
        String brand=brand_TextField.getText();
        String category=category_TextField.getText();
        
        if(name.isEmpty()||price.isEmpty()||discount.isEmpty()||quantity.isEmpty()|| brand.isEmpty()||category.isEmpty()){
            JOptionPane.showMessageDialog(this, "Select an item");
        }
        
        else{
            int yes=JOptionPane.showConfirmDialog(this,"Are you sure you want to delete this item ?!");
            if(yes==0){
             try{
            db_connection c=new db_connection();
            Connection conn= c.connect() ;
            int row = products_Table.getSelectedRow();
            int id=  Integer.parseInt(products_Table.getValueAt(row, 0).toString());
            String query ="DELETE FROM products WHERE product_id = ?";
            PreparedStatement stmt =conn.prepareStatement(query);
            stmt.setInt(1,id );
            stmt.execute();
            fetch_products();
            JOptionPane.showMessageDialog(this, "Item is deleted");            
            conn.close();
            stmt.close();
        nameTextField.setText("");
        price_TextField.setText("");
        discount_TextField.setText("");
        quantity_TextField.setText("");
        brand_TextField.setText("");
        category_TextField.setText("");

             }
              catch (SQLException ee){
            
            ee.getMessage();
            System.out.println("error");
        }}
             
             
            
        }


    }//GEN-LAST:event_delete_ButtonActionPerformed

    private void edit_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edit_ButtonActionPerformed
        String name=nameTextField.getText();
        String price=price_TextField.getText();
        String discount =discount_TextField.getText();
        String quantity= quantity_TextField.getText();
        String brand=brand_TextField.getText();
        String category=category_TextField.getText();
        
        if(name.isEmpty()||price.isEmpty()||discount.isEmpty()||quantity.isEmpty()|| brand.isEmpty()||category.isEmpty()){
            JOptionPane.showMessageDialog(this, "Select an item");
        }
        
        else{
            int yes=JOptionPane.showConfirmDialog(this,"Are you sure you want to Update this item ?!");
            if(yes==0){
             try{
            db_connection c=new db_connection();
            Connection conn= c.connect() ;
            int row = products_Table.getSelectedRow();
            int id=  Integer.parseInt(products_Table.getValueAt(row, 0).toString());
            String query ="UPDATE products SET name =? ,price=? , discount =?, quantity=?, brand_name =? , category_name=? WHERE product_id = ?";
            PreparedStatement stmt =conn.prepareStatement(query);
            stmt.setString(1,name );
            stmt.setDouble(2, Double.parseDouble(price));
            stmt.setDouble(3,Double.parseDouble( discount));
            stmt.setInt(4, Integer.parseUnsignedInt(quantity));
            stmt.setString(5, brand);
            stmt.setString(6, category);
            stmt.setInt(7,id );
            stmt.execute();
            System.out.println("7777777777777777777777777777");
            fetch_products();
            JOptionPane.showMessageDialog(this, "Item is updated");            
            conn.close();
            stmt.close();
        nameTextField.setText("");
        price_TextField.setText("");
        discount_TextField.setText("");
        quantity_TextField.setText("");
        brand_TextField.setText("");
        category_TextField.setText("");

             }
              catch (SQLException ee){
            
            ee.getMessage();
            System.out.println("error");
        }}
             
             
            
        }
    }//GEN-LAST:event_edit_ButtonActionPerformed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
     
    }//GEN-LAST:event_formKeyPressed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
       }//GEN-LAST:event_formMouseClicked

    private void message_LabelAncestorRemoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_message_LabelAncestorRemoved
        // TODO add your handling code here:
    }//GEN-LAST:event_message_LabelAncestorRemoved

    private void message_LabelComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_message_LabelComponentHidden
message_Label.setText("");    }//GEN-LAST:event_message_LabelComponentHidden

    private void search_TextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_TextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_search_TextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
//        db_connection c =new db_connection();
//        Connection con=c.connect();
//        ResultSet rs = c.fetch("products");
//        prod
    
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new stockmanager_products_frame().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_Button;
    private javax.swing.JComboBox<String> brand_ComboBox;
    private javax.swing.JTextField brand_TextField;
    private javax.swing.JButton brand_filter_Button;
    private javax.swing.JButton cat_filter_Button;
    private javax.swing.JComboBox<String> category_ComboBox;
    private javax.swing.JTextField category_TextField;
    private javax.swing.JButton delete_Button;
    private javax.swing.JTextField discount_TextField;
    private javax.swing.JButton edit_Button;
    private javax.swing.JButton find_Button;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel message_Label;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JTextField price_TextField;
    private javax.swing.JTable products_Table;
    private javax.swing.JTextField quantity_TextField;
    private javax.swing.JTextField search_TextField;
    // End of variables declaration//GEN-END:variables
}
